Pthreads (highlevel)
-----------------------------------------------------------------------------------------------------
- Einfach zu benutzen (im historischen Kontext, heute im Verhältnis eher schwierig)
- Lightweight (stimmt auch heute noch)
- Portabel (stimmt auch heute noch, abgesehen von Windows -> Dafür gibts aber weitere Abstraktion: ApacheRuntime)
- Java-Syntaktisch
- Anwendungen:
    - Ada, Concurrent Pascal
    - Closure, Erlang
        - Warum gibts Closure / Erlang?
        - Um einfach parallele Programme schreiben zu können
        - Aber anderer Lösungsansatz: In Closure/Erlang gibts keinen shared state


Threads - Co-Routinen
-----------------------------------------------------------------------------------------------------
Übersicht (was wir machen werden)
- Was sind Threads?
    - Datenaustausch
    - Synchronisation
- Design von multithread programs
- Architekturen
    - Boss/Slave aka Server/Client
    - Peer
    - Pipeline
- Thread Pool
- On demand
- Datenbuffer



Thread-Modell
-----------------------------------------------------------------------------------------------------
Speicheraufteilung:
- Stack mit stack frames (lokale Variablen, Rücksprungadresse, ...)
- Globale Daten
- Code (program counter zeigt irgendwo hierauf)
- Heap
-> Stack baut sich auf (mit jedem Verschachtelungslevel)


