Was sind Threads?
-----------------------------------------------------------------------------------------------------
- Pthreads
    - Syntaxdefinition (Standard) ist so alt wie Pthreads selbst
    - Fun fact: Semantik war bis vor ca. 2 Jahren nicht als Standard definiert
- Es gibt Threads auch auf höheren Ebenen: Java, Ruby, ...
- Linux per se hat keine Threads, diese kommen erst mit libc



Parallelismus / Potentieller Parallelismus
-----------------------------------------------------------------------------------------------------
- Pseudo-Parallelität: Timesharing (mehrere Prozesse teilen einen Core)
- Echte Parallelität bringt neues Problem mit sich: Gewisse Teilaufgaben hangen voneinander ab
    -> D.h. man kann nur voneinander unabhängige Aufgaben parallelisieren
- Potentielle Parallelismen:
    - I/O, respektive blockierendes I/O -> während I/O wurde CPU nicht benutzt
        -> Deshalb: Maschinenbefehle aufgeteilt, so dass während verarbeiten von Datum schon wieder nächstes gelesen wird
    - Überlappende I/O (paralleler Download von mehreren Images)
    - Asynchrone Ereignisse
    - Realtime (z.B. Videostreaming, Telefonie, ...)


Für Parallelisierung benötigt:
- Parallele Ausführung
    - Kann auch implizit sein, z.B. bei Erlang (alles parallel), XSLT (Engine parallelisiert selbst, man deklariert nur), CSS (browser kümmert sich drum)
- Synchronisation
    - Muss nicht zwingend benutzt werden: Wenn ich z.B. nur eine Message broadcasten will
- Kommunikation
    - Datenaustausch


Unix
-----------------------------------------------------------------------------------------------------
- Fork
    - Vergabelung
    - Prozess wird kopiert
    - Die beiden Prozesse sind voneinander unabhängig, es ist für A nicht möglich, auf die Daten von B zuzugreifen
    - Interprozesskommunikation: "Everything's a file" -> A schreibt Daten in File, B liest sie
    - Child hat auf gleiche Ressourcen Zugriff, wie Parent (gleiche Rechte, etc.)
    - Fork gibt zurück:
        - 0 für Kind
        - PID des für Parent-Prozess
        -> Dies wird verwendet, um die Prozesse im Folgenden voneinander zu unterscheiden (Parent oder Child?)
    - Vorteile:
        - Speicherschutz
    - Nachteile
        - Speicherschutz (weil manchmal möchte man ja Daten teilen)
        - Synchronisation ist aufwändiger
        - Unübersichtlich


Multiprozessing mit Threads
-----------------------------------------------------------------------------------------------------
- Weniger Programmoverhead
- Weniger Systemoverhead
- Keine Eltern
    - Threads sind gleichwertig/gleichberechtigt
    - Jedoch existiert ein "main" Thread

Example:
int pthread_create(
    pthread_t *thread,                  <----- Identifier (ID) (wird von pthread_create in pthread_t reingeschrieben)
    const pthread_attr_t *attr,         <----- Attribute, die Thread konfigurieren
    void *(*start_routine)(void*),      <----- Funktion, die von Thread ausgeführt wird (Void-Pointer: Argument und Rückgabewert sind beliebig)
    void *arg);                         <----- Parameter, die Thread übergeben werden



Some things about C
-----------------------------------------------------------------------------------------------------
- Parameterübergabe ist immer "by value" (auch für komplexe Datentypen wie struct), ausser es wird explizit ein Pointer übergeben

