Geteilte Ressourcen
-------------------------------------------
- Immer Mutexe verwenden
- Wenn man keine Mutexe verwendet:
    - Bugs, wenn zwei Threads gleichzeitig auf Ressource zugreifen
    - Bugs können aber auch versteckt sein und erst "irgendwann" auftauchen
    - Diese Art Bugs sind schwierig zu debuggen, weil "100 mal richtig, 1 mal falsch"
- Spezifische Probleme:
    - Dead lock (z.B. wenn zwei Threads von vorne und hinten durch gleiche Liste loopen um zu sortieren)
    - Race conditions (wegen falscher Annahme, wer zuerst fertig ist -> schwierig zu debuggen)
    - Ressource starvation (ein Thread "verhungert", kann nie auf die Ressource zugreifen, die er braucht, weil diese immer von anderen blockiert sind)


- Bankomat Beispiel angeschaut:
    - Seriell: Select
    - S.64: So wie JS: keine Blockierung, aber Events mit Callbacks (Hier: Signale)


- Kriterien für Einsatz von Multithreading angeschaut (in Bezug zum Bankomat angeschaut -> Statistik tiefe Prio, Shutdown hohe Prio)

S.70: Für Matrizen-Multiplikation haben wir Peer-Modell gewählt

Commands:
pthread_create: Thread erstellen
pthread_detach: Thread detachen, d.h. Referenz auf Thread löschen (Thread ist jetzt auf sich selbst gestellt)
pthread_join: Resultat vom Worker-Thread wieder holen
